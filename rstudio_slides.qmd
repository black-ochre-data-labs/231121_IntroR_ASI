---
title: "Using RStudio"
subtitle: "ASI: Introduction to R"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | Telethon Kids Institute
date: "2023-11-21"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
    slide-number: c/t
    show-slide-number: all
  html: 
    output-file: rstudio.html
    embed-resources: true    
    toc: true
    toc-depth: 1
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>      
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center
---


# RStudio {background-color="#3c3c44"}

## Before we start 

1. Create a folder on your computer for today's material
    + We recommend `Documents/R_Training` in your home folder
    
. . .
    
2. Now we can open `RStudio`

. . .

- `RStudio` will always open in a folder somewhere
    + Look in the `Files` pane to try figure out where it's looking

## Create an R Project

(This won't work for those in the posit cloud)

1. `File` > `New Project` > `Existing Directory` >
    + Browse to `Documents/R_Training`
    + `Create Project`

. . .

- `R Projects` are simply a wrapper for keeping an analysis organised
    - Will always open in the R Project directory
    - You can easily navigate to a directory with all scripts and data
    - Makes managing file paths from your code **very simple**
    
. . .    
    
- The `R Project` name will **always** be the directory name
- Not essential, but are *good practice* and *extremely useful*
- The Project Menu is in the **top-right** of RStudio


## RStudio

1. `File` > `New File` > `R Script`
2. Save As `Introduction.R`

## RStudio

```{r, echo = FALSE, include=TRUE, results='asis', fig.show='asis', out.width=1000}
knitr::include_graphics("assets/RStudio.png")
```


## The Script Window

- This is just a text editor.
- We enter our commands here but they are not executed
    - We can keep a record of __everything__ we've done
    - We can also add comments to our code
    - Comments start with the `#` symbol
- We'll return here later

## The R Console

```{r, echo = FALSE, include=TRUE, results='asis', fig.show='asis', out.width=900}
knitr::include_graphics("assets/RStudio.png")
```


## The R Console

- Where we execute commands $\implies$ is essentially the _"engine"_
- We can execute commands directly in the `Console` 
- At it's simplest is just a calculator

```{r}
1 + 1
2 * 2
2 ^ 3
```

. . .

Also has many standard functions

```{r}
sqrt(2)
log10(1000)
```


::: {.notes}
I never use a calculator program on my laptop, always R
:::


## The R Console

<br>As well as performing simple calculations:

- `R` has what we call an `Environment` (i.e. a Workspace)
- We can define objects here, or import data
   - Similar to a workbook in Excel
   - **Much more** flexible & powerful
   
. . .   
   
- Objects can look like spreadsheets, be a single number or even empty
   - 'omics data often has more complicated but defined structures
- `R` performs calculations & runs processes on these objects

::: {.notes}
When we create a new sheet in Excel, we're actually creating an object.
Most commonly, it's named Sheet1 or something similar
:::

## Creating an `R` object

- We need to give it a name, and some data
    - Like naming a spreadsheet in Excel (e.g. `Sheet1`)
- The process looks like `objectName <- data`

. . .

- The `<-` symbol is like an arrow
    - Tells `R` to put `data` into `objectName`
    - Was a single key on APL keyboards in the 1970s

. . .

![*An APL Keyboard from the 1970s*](assets/APL-keybd2.png){width=60% fig-align="left"}
    
## The R Environment 

In the R Console type:

```{r}
x <- 5
```

- We have just defined an object called `x`
- View the contents of the object `x` by entering it's name directly in the `Console`

```{r, echo=TRUE, include=TRUE, results='hide'}
x
```


## The R Environment


*__Where have we created the object `x`?__*

- Is it on your hard drive somewhere?
- Is it in a file somewhere?

. . .

- We have placed `x` in our `R Workspace`
- More formally known as your `Global Environment`

. . .

![](assets/EnvironmentTab.png)


## The R Environment

- The `Environment` is like your desktop
- We keep all our relevant objects here 
    + Can save all the objects in your workspace as a single `.RData` object
    + `R` can be set to automatically save your environment on exit

. . .

- To save your environment manually

```{r, eval=FALSE, echo=TRUE, include=TRUE}
save.image()
```


## The R Environment

Once an object is in the `Environment` we can perform calculations on it

```{r}
1 + x
x^2
```

**NB: R is case sensitive**

. . .

- `R` has a series of inbuilt functions, e.g. `sqrt()`, `log()`, `max()`, `min()` etc.
- We place an object or value inside the `()` after the name of a function

```{r}
sqrt(x)
log(x)
```

## The R Environment: Functions

- Many inbuilt functions are organised into a package called `base`
    - Always installed with `R`
    - Has all the base functions other packages are built on
    - Packages group similar/related functions together
    
. . .    
    
```{r, eval=FALSE}
?sqrt
```

- This will take you to the `Help` pane for the `sqrt()` function
    + Click `Run examples` to run any examples

. . .

- Click on the underlined word `Index` at the bottom for a list of functions in the `base` packages
   + Absolutely no need to learn any of these
    
::: {.notes}
- May be issues with `URL '/help/library/base/html/00Index.html' not found`
- The examples in this help page are a bit rubbish...
:::

## Additional Sources For Help

- Help pages in `R` can be hit & miss
    + Some are excellent and informative $\implies$ some aren't

. . .
    
- Bioconductor has a support forum for Bioconductor packages
    + All packages have a vignette (again varying quality)
    
. . .

- Google is your friend [$\implies$ maybe ChatGPT?]{.fragment .fade-in}
    
. . .

- StackOverflow is usually very helpful
- Some blog posts showing how to do something
- YouTube channels

::: {.notes}
As a package author, I'm always reading my own help pages.
I simply can't remember everything I've written
:::
    
## Vectors

- Instead of a single value, we can give an `R` object multiple values
- Known as a **vector** $\implies$ like a column in Excel

```{r}
x <- 1:5
x
length(x)
```

## Vectors: A Sneak Peek

Functions & calculations work on the entire vector

```{r}
x + 1
x^2
sqrt(x)
max(x)
sum(x)
mean(x)
sd(x)
```

<!-- No need to select a column or cells... -->

. . . 

(We'll discuss subsetting later)
    
# The Script Window {background-color="#3c3c44"}

## RStudio: The Script Window

Best practice for all analysis is to enter our code in the Script Window

- This is a plain text editor $\implies$ `RStudio` will:
    - highlight syntax for us
    - help manage indenting
    - enable auto-completion (it can be slower than your typing)
- Enter code in this window and *send it to the R Console*    
- We save this file as a record of what we've done
    - Code is the important object $\implies$ can recreate all results

## RStudio: The Script Window

- We can write comments by starting a line with the `#`
    - Anything following this symbol will not be executed
    - Can write notes to ourselves and collaborators
    - We can also place this at the end of a line with a comment
- Enter the following in your script `Introduction.R` **but don't do anything else**

```{r}
# Create an object called x
x <- 5
```

## RStudio: The Script Window


```{r}
# Create an object called x
x <- 5
```

To send this to the Console:

::: {.incremental}

- Place the cursor on the line with `x <- 5` then `Ctrl+Enter` (`Cmd+Enter` on OSX), or
- Select one or more entire lines using the mouse then `Ctrl+Enter` (or `Cmd+Enter`)
- Or after selecting one or more lines you can click the `Run` button
    - Be careful to select all the correct text though
    + It's very easy to miss the first character

:::

## RStudio: The Script Window

As well as creating objects, we can write general code

```{r}
# I'm not sure. Is x greater than zero?
x > 0
```

Including comments describing your intention, is **highly advisable**

::: {.notes}
Note that we haven't saved any objects during this step
:::


## RStudio: Tab Auto-completion

`RStudio` will give us suggestions when we ask it to.

. . .

- In either the Console or Script Window type `?me` then hit the `<tab>` key
    - A whole lot of options will appear
    - Very handy with long variable/function names
    - If you can't quite remember the spelling
    - Sometimes completes when you don't want it to


# Other Tabs and Features {background-color="#3c3c44"}

## Other Tabs and Features

- Next to the `Environment` Tab is the `History` Tab
    - Contains everything executed in the `Console`
    - Useful for when we've been lazy

**Best practice is to enter code in the `Script Window` and execute**

## Other Tabs and Features

In the bottom right are a series of tabs

1. `Files`: This shows your current working directory
2. `Plots`: Every time you make a graph it appears here
3. `Packages`: [__NEVER CLICK OR UN-CLICK ANYTHING HERE__]{.underline}
4. `Help`: We all use this a lot!

::: {.notes}
I always disable the packages pane: it takes up space & is both dangerous and useless
:::

<!-- ## RStudio: Disable The Packages Tab -->

<!-- Let's disable the `Packages` pane -->

<!-- 1. `Tools` > `Global Options` -->
<!-- 2. `Packages` -->
<!-- 3. Uncheck `Enable packages pane` -->
<!-- 4. `Enter` or `Apply` -->

## Other Tabs and Features

- Every tab can be minimised/maximised using the buttons on the top right
- Window separators can be be moved to resize panes manually

## Cheatsheet and Shortcuts

`Help > Cheatsheets > RStudio IDE Cheat Sheet`

Page 2 has lots of hints:

- `Ctrl + 1` places focus on the Script Window
- `Ctrl + 2` places focus on the Console
- `Ctrl + 3` places focus on the Help Tab